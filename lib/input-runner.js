/*eslint-env node*/
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var _sourceMapSupport = require("source-map-support");

require("babel/polyfill");

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

(0, _sourceMapSupport.install)();

var input = "";
process.stdin.on("readable", function () {
    var chunk = process.stdin.read();
    if (chunk !== null) {
        input += chunk;
    }
});

process.stdin.on("end", function () {
    _index.functionRegistry.register("import", function (callName, args, functionBody, interpreter) {
        if (!args.byName.file) interpreter.inputStream.croak("Expected file argument for `.${callName}`");

        return [new _index.interpreterUtils.PlainText((0, _index2["default"])(_fs2["default"].readFileSync(args.byName.file.toString()).toString()))];
    });

    _index.functionRegistry.register("importRaw", function (callName, args, functionBody, interpreter) {
        if (!args.byName.file) interpreter.inputStream.croak("Expected file argument for `." + callName + "`");

        return [new _index.interpreterUtils.PlainText(_fs2["default"].readFileSync(args.byName.file.toString()).toString())];
    });

    _index.functionRegistry.register("pageTitle", function (callName, args, functionBody) {
        return [new _index.interpreterUtils.HTMLOpen("<div class=\"pageTitle\">")].concat(_toConsumableArray(functionBody), [new _index.interpreterUtils.HTMLClose("div")]);
    });

    _index.functionRegistry.register("link", function (callName, args, functionBody, interpreter) {
        if (!args.byName.href) interpreter.inputStream.croak("Expected href argument for `." + callName + "`");
        return interpreter.callFunctionWithBody("a", args, functionBody);
    });

    function registerAlias(from, to) {
        _index.functionRegistry.register(from, function (callName, args, functionBody, interpreter) {
            return interpreter.callFunctionWithBody(to, args, functionBody);
        });
    }

    registerAlias("paragraph", "p");
    registerAlias("emphasis", "em");
    registerAlias("bold", "b");

    var parsedInput = (0, _index2["default"])(input);
    process.stdout.write(JSON.stringify(parsedInput, null, 4));
    process.stdout.write("\n\n");
    process.stdout.write("\"\"\"\n" + parsedInput.toString() + "\n\"\"\"\n");
});
//# sourceMappingURL=data:application/json;base64,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U0FDbkUsQ0FBQyxDQUFDO0tBQ047O0FBRUQsaUJBQWEsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDaEMsaUJBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDaEMsaUJBQWEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7O0FBRTNCLFFBQUksV0FBVyxHQUFHLHdCQUFNLEtBQUssQ0FBQyxDQUFDO0FBQy9CLFdBQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNELFdBQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLFdBQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxjQUFTLFdBQVcsQ0FBQyxRQUFRLEVBQUUsZ0JBQVUsQ0FBQztDQUNqRSxDQUFDLENBQUMiLCJmaWxlIjoiaW5wdXQtcnVubmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyplc2xpbnQtZW52IG5vZGUqL1xuaW1wb3J0IHtpbnN0YWxsfSBmcm9tIFwic291cmNlLW1hcC1zdXBwb3J0XCI7XG5pbnN0YWxsKCk7XG5pbXBvcnQgXCJiYWJlbC9wb2x5ZmlsbFwiO1xuaW1wb3J0IHtmdW5jdGlvblJlZ2lzdHJ5LCBkZWZhdWx0IGFzIHBhcnNlLCBpbnRlcnByZXRlclV0aWxzfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuXG52YXIgaW5wdXQgPSBcIlwiO1xucHJvY2Vzcy5zdGRpbi5vbihcInJlYWRhYmxlXCIsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBjaHVuayA9IHByb2Nlc3Muc3RkaW4ucmVhZCgpO1xuICAgIGlmIChjaHVuayAhPT0gbnVsbCkge1xuICAgICAgICBpbnB1dCArPSBjaHVuaztcbiAgICB9XG59KTtcblxucHJvY2Vzcy5zdGRpbi5vbihcImVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvblJlZ2lzdHJ5LnJlZ2lzdGVyKFwiaW1wb3J0XCIsIGZ1bmN0aW9uIChjYWxsTmFtZSwgYXJncywgZnVuY3Rpb25Cb2R5LCBpbnRlcnByZXRlcikge1xuICAgICAgICBpZiAoIWFyZ3MuYnlOYW1lLmZpbGUpIGludGVycHJldGVyLmlucHV0U3RyZWFtLmNyb2FrKFwiRXhwZWN0ZWQgZmlsZSBhcmd1bWVudCBmb3IgYC4ke2NhbGxOYW1lfWBcIik7XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5ldyBpbnRlcnByZXRlclV0aWxzLlBsYWluVGV4dChcbiAgICAgICAgICAgICAgICBwYXJzZShmcy5yZWFkRmlsZVN5bmMoYXJncy5ieU5hbWUuZmlsZS50b1N0cmluZygpKS50b1N0cmluZygpKVxuICAgICAgICAgICAgKVxuICAgICAgICBdO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb25SZWdpc3RyeS5yZWdpc3RlcihcImltcG9ydFJhd1wiLCBmdW5jdGlvbiAoY2FsbE5hbWUsIGFyZ3MsIGZ1bmN0aW9uQm9keSwgaW50ZXJwcmV0ZXIpIHtcbiAgICAgICAgaWYgKCFhcmdzLmJ5TmFtZS5maWxlKSBpbnRlcnByZXRlci5pbnB1dFN0cmVhbS5jcm9hayhgRXhwZWN0ZWQgZmlsZSBhcmd1bWVudCBmb3IgXFxgLiR7Y2FsbE5hbWV9XFxgYCk7XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5ldyBpbnRlcnByZXRlclV0aWxzLlBsYWluVGV4dChcbiAgICAgICAgICAgICAgICBmcy5yZWFkRmlsZVN5bmMoYXJncy5ieU5hbWUuZmlsZS50b1N0cmluZygpKS50b1N0cmluZygpXG4gICAgICAgICAgICApXG4gICAgICAgIF07XG4gICAgfSk7XG5cblxuICAgIGZ1bmN0aW9uUmVnaXN0cnkucmVnaXN0ZXIoXCJwYWdlVGl0bGVcIiwgZnVuY3Rpb24gKGNhbGxOYW1lLCBhcmdzLCBmdW5jdGlvbkJvZHkpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5ldyBpbnRlcnByZXRlclV0aWxzLkhUTUxPcGVuKGA8ZGl2IGNsYXNzPVwicGFnZVRpdGxlXCI+YCksXG4gICAgICAgICAgICAuLi5mdW5jdGlvbkJvZHksXG4gICAgICAgICAgICBuZXcgaW50ZXJwcmV0ZXJVdGlscy5IVE1MQ2xvc2UoYGRpdmApXG4gICAgICAgIF07XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvblJlZ2lzdHJ5LnJlZ2lzdGVyKFwibGlua1wiLCBmdW5jdGlvbiAoY2FsbE5hbWUsIGFyZ3MsIGZ1bmN0aW9uQm9keSwgaW50ZXJwcmV0ZXIpIHtcbiAgICAgICAgaWYgKCFhcmdzLmJ5TmFtZS5ocmVmKSBpbnRlcnByZXRlci5pbnB1dFN0cmVhbS5jcm9hayhgRXhwZWN0ZWQgaHJlZiBhcmd1bWVudCBmb3IgXFxgLiR7Y2FsbE5hbWV9XFxgYCk7XG4gICAgICAgIHJldHVybiBpbnRlcnByZXRlci5jYWxsRnVuY3Rpb25XaXRoQm9keShcImFcIiwgYXJncywgZnVuY3Rpb25Cb2R5KTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQWxpYXMoZnJvbSwgdG8pIHtcbiAgICAgICAgZnVuY3Rpb25SZWdpc3RyeS5yZWdpc3Rlcihmcm9tLCBmdW5jdGlvbiAoY2FsbE5hbWUsIGFyZ3MsIGZ1bmN0aW9uQm9keSwgaW50ZXJwcmV0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcnByZXRlci5jYWxsRnVuY3Rpb25XaXRoQm9keSh0bywgYXJncywgZnVuY3Rpb25Cb2R5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJBbGlhcyhcInBhcmFncmFwaFwiLCBcInBcIik7XG4gICAgcmVnaXN0ZXJBbGlhcyhcImVtcGhhc2lzXCIsIFwiZW1cIik7XG4gICAgcmVnaXN0ZXJBbGlhcyhcImJvbGRcIiwgXCJiXCIpO1xuXG4gICAgbGV0IHBhcnNlZElucHV0ID0gcGFyc2UoaW5wdXQpO1xuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKEpTT04uc3RyaW5naWZ5KHBhcnNlZElucHV0LCBudWxsLCA0KSk7XG4gICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoXCJcXG5cXG5cIik7XG4gICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoYFwiXCJcIlxcbiR7cGFyc2VkSW5wdXQudG9TdHJpbmcoKX1cXG5cIlwiXCJcXG5gKTtcbn0pO1xuIl19